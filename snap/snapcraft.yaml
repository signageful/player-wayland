name: signageful-player-wayland # you probably want to 'snapcraft register <name>'
version: '1.10.2' # just for humans, typically '1.2+git' or '1.3.2'
summary: Provides the Signageful Player for Wayland
description: "This is the Signageful Wayland Player for Ubuntu Core. Make sure to \ninstall `ubuntu-frame` snaps to get this snap to work.\n\nIf you are looking for OSK support, please install the `ubuntu-frame-osk` snap.\n"
base: core20 # the base snap is the execution environment for this snap
grade: stable # must be 'stable' to release into candidate/stable channels
confinement: strict # use 'strict' once you have the right plugs and slots
compression: lzo
architectures:
  - build-on: amd64
  # - build-on: armhf
  - build-on: arm64

system-usernames:
  snap_daemon: shared

apps:
  sig-monitor:
    command: bin/sig-monitor
    daemon: simple
    plugs:
      - home
      - network
      - hardware-observe
      - mount-observe
      - network-control
      - network-bind
      - process-control
      - system-observe
      - daemon-notify
  signageful-client:
    daemon: simple
    # restart-condition: always
    # restart-delay: 3s
    command-chain:
      - bin/wayland-launch
      - bin/dbus-launch
    command: usr/bin/wrapper
    plugs:
      - audio-playback
      - hardware-observe
      - power-control
      # added for powerMonitor,
      # if this doesnt help add
      - system-observe
      # - system-trace
      - network
      - network-bind
      - opengl
      - process-control
      - wayland
    environment:
      XDG_DATA_HOME: $SNAP_USER_DATA
      XDG_DATA_DIRS: $SNAP/usr/share
      GTK_USE_PORTAL: 0
      GDK_GL: gles

# This is one of four snippets that relate to providing the userspace graphics needed by your application.
# You can treat this as "magic" so long as you don't need to make changes.
# On the Mir discourse forum there's a lot more detail on [the graphics-core20 Snap interface](https://discourse.ubuntu.com/t/the-graphics-core20-snap-interface/23000) and it's use.
plugs:
  # Auto-connected
  wayland:
  audio-playback:
  hardware-observe:
  graphics-core20:
    interface: content
    target: $SNAP/graphics
    default-provider: mesa-core20
  
environment:
  # This is one of four snippets that relate to providing the userspace graphics needed by your application.
  LD_LIBRARY_PATH: $SNAP/graphics/lib
  LIBGL_DRIVERS_PATH: $SNAP/graphics/dri
  LIBVA_DRIVERS_PATH: $SNAP/graphics/dri
  __EGL_VENDOR_LIBRARY_DIRS: $SNAP/graphics/glvnd/egl_vendor.d
  # Other, generally useful environment settings...
  # XDG config
  XDG_CACHE_HOME: $SNAP_USER_COMMON/.cache
  XDG_CONFIG_HOME: $SNAP_USER_DATA/.config
  XDG_CONFIG_DIRS: $SNAP/etc/xdg
  # XKB config
  XKB_CONFIG_ROOT: $SNAP/usr/share/X11/xkb

# The `layout` ensures that files can be found by applications where they are expected by the toolkit or application.
layout:
  # This is one of four snippets that relate to providing the userspace graphics needed by your application.
  # These paths (/usr/share/libdrm and /usr/share/drirc.d) are hardcoded in mesa.
  /usr/share/libdrm: # Needed by mesa-core20 on AMD GPUs
    bind: $SNAP/graphics/libdrm
  /usr/share/drirc.d: # Used by mesa-core20 for app specific workarounds
    bind: $SNAP/graphics/drirc.d
  # Other, generally useful paths
  /usr/share/fonts:
    bind: $SNAP/usr/share/fonts
  /usr/share/icons:
    bind: $SNAP/usr/share/icons
  /usr/share/sounds:
    bind: $SNAP/usr/share/sounds
  /etc/fonts:
    bind: $SNAP/etc/fonts
  # GTK
  /usr/lib/$SNAPCRAFT_ARCH_TRIPLET/gdk-pixbuf-2.0:
    bind: $SNAP/usr/lib/$SNAPCRAFT_ARCH_TRIPLET/gdk-pixbuf-2.0
  /usr/lib/${SNAPCRAFT_ARCH_TRIPLET}/gtk-3.0:
    bind: $SNAP/usr/lib/${SNAPCRAFT_ARCH_TRIPLET}/gtk-3.0
  /usr/share/mime:
    bind: $SNAP/usr/share/mime
  /etc/gtk-3.0:
    bind: $SNAP/etc/gtk-3.0

parts:
  sig-monitor:
    plugin: nil
    # things that are needed to BUILD the application
    build-packages:
      - wget
      - unzip
    override-build: |
      set +u # core20 base does not allow unbound variables !
      ## oposite of player
      export ARCH=amd64
      if [ "$SNAP_ARCH" = "x64" ]; then
        export ARCH="amd64"
      elif [ "$SNAP_ARCH" = "arm64" ]; then
        export ARCH="arm64"
      fi
      wget https://github.com/signageful/client/releases/download/v$SNAPCRAFT_PROJECT_VERSION/sig-monitor_linux_$ARCH.tar.gz
      tar -zxvf sig-monitor_linux_$ARCH.tar.gz
 
      mkdir $SNAPCRAFT_PART_INSTALL/bin
      mv ./sig-monitor $SNAPCRAFT_PART_INSTALL/bin/sig-monitor
      chmod a+rx $SNAPCRAFT_PART_INSTALL/bin/sig-monitor
  # the first part should become the 'app' in the snap, in our case the `player` binary
  # we are using git to pull the source code from the repository
  player:
    plugin: nil
    # things that are needed to BUILD the application
    build-packages:
      - wget
      - unzip
    # things that are needed to RUN the application
    stage-packages:
     # These are required for Electron
     - libasound2
     - libgconf-2-4
     - libx11-xcb1
     - libxss1
     - libxtst6
     - libnss3
     - libnspr4
     - libatk1.0-0
     - libatk-bridge2.0-0
     - libcups2
     - libdbus-1-3
     - libgtk-3-0
     - libcap2
     - libnotify4
    override-build: |
      set +u # core20 base does not allow unbound variables !
      # set variable $ARCH from $SNAP_ARCH, if SNAP_ARCH is amd64 set it to x64
      # if SNAP_ARCH is arm64 set it to arm64
      if [ "$SNAP_ARCH" = "amd64" ]; then
        export ARCH="x64"
      elif [ "$SNAP_ARCH" = "arm64" ]; then
        export ARCH="arm64"
      fi

      wget https://github.com/signageful/client/releases/download/v$SNAPCRAFT_PROJECT_VERSION/signageful-client-linux-$ARCH-$SNAPCRAFT_PROJECT_VERSION.zip
      ls -lah

      unzip signageful-client-linux-$ARCH-$SNAPCRAFT_PROJECT_VERSION.zip
      rm signageful-client-linux-$ARCH-$SNAPCRAFT_PROJECT_VERSION.zip
      cp -a ./signageful-client-linux-$ARCH $SNAPCRAFT_PART_INSTALL/signageful-client
      chmod a+rx $SNAPCRAFT_PART_INSTALL/signageful-client
  wrapper:
    plugin: dump
    source: wrapper
    organize:
      wrapper.sh: usr/bin/wrapper
  gsettings+pixbuf:
    plugin: nil
    build-packages:
      - libgdk-pixbuf2.0-0
      - librsvg2-common
      - shared-mime-info
    override-build: |
      # Update mime database
      update-mime-database ${SNAPCRAFT_PART_INSTALL}/usr/share/mime

    stage-packages:
      - librsvg2-common
      - gsettings-desktop-schemas
      - libglib2.0-bin
    override-prime: |
      snapcraftctl prime
      # Compile the gsettings schemas
      /usr/lib/${SNAPCRAFT_ARCH_TRIPLET}/glib-2.0/glib-compile-schemas "$SNAPCRAFT_PRIME/usr/share/glib-2.0/schemas"
      # Index the pixbuf loaders
      LOADERS_PATH=$(echo ${SNAPCRAFT_PRIME}/usr/lib/${SNAPCRAFT_ARCH_TRIPLET}/gdk-pixbuf-2.0/*/loaders)
      QUERY_LOADERS=/usr/lib/${SNAPCRAFT_ARCH_TRIPLET}/gdk-pixbuf-2.0/gdk-pixbuf-query-loaders
      GDK_PIXBUF_MODULEDIR=${LOADERS_PATH} ${QUERY_LOADERS} > ${LOADERS_PATH}/../loaders.cache
      sed s!$SNAPCRAFT_PRIME!!g --in-place ${LOADERS_PATH}/../loaders.cache
  immodules:
    plugin: nil
    build-packages:
      - libgtk-3-0
    override-build: |
      snapcraftctl build
      mkdir -p ${SNAPCRAFT_PART_INSTALL}/usr/lib/${SNAPCRAFT_ARCH_TRIPLET}/gtk-3.0/3.0.0/
      /usr/lib/${SNAPCRAFT_ARCH_TRIPLET}/libgtk-3-0/gtk-query-immodules-3.0 > ${SNAPCRAFT_PART_INSTALL}/usr/lib/${SNAPCRAFT_ARCH_TRIPLET}/gtk-3.0/3.0.0/immodules.cache
  # Because Bomber won't run without a session dbus, and this isn't available to daemons on core
  # (there is no "session") we need to include a dbus session in the snap.
  # The `source: dbus` contains a script and configuration file for running `dbus-run-session`.
  dbus-launch:
    plugin: dump
    source: dbus
    organize:
      session.conf: etc/dbus-1/session.conf
      dbus-launch: bin/dbus-launch
    override-prime: |
      snapcraftctl prime
      # replace the SNAP_NAME placeholder with our actual project name
      sed -i "s/SNAP_NAME/$SNAPCRAFT_PROJECT_NAME/" $SNAPCRAFT_PRIME/etc/dbus-1/session.conf
  # Some utility scripts for setting up the Wayland environment
  wayland-launch:
    plugin: dump
    source: wayland-launch
    override-build: |
      # The plugs needed to run Wayland. (wayland-launch checks them, setup.sh connects them)
      # You may add further plugs here if you want these options
      PLUGS="opengl wayland graphics-core20"
      sed --in-place "s/%PLUGS%/$PLUGS/g" $SNAPCRAFT_PART_BUILD/bin/wayland-launch
      sed --in-place "s/%PLUGS%/$PLUGS/g" $SNAPCRAFT_PART_BUILD/bin/setup.sh
      snapcraftctl build
    stage-packages:
      - inotify-tools
  # This is one of four snippets that relate to providing the userspace graphics needed by your application.
  # This ensures that your snap doesn't contain its own copy of the userspace drivers
  cleanup:
    after:
      - player
      - wrapper
      - wayland-launch
      - dbus-launch
      - gsettings+pixbuf
      - immodules
    plugin: nil
    build-snaps: [mesa-core20]
    override-prime: |
      set -eux
      cd /snap/mesa-core20/current/egl/lib
      find . -type f,l -exec rm -f $SNAPCRAFT_PRIME/usr/lib/${SNAPCRAFT_ARCH_TRIPLET}/{} \;
      rm -fr "$SNAPCRAFT_PRIME/usr/lib/${SNAPCRAFT_ARCH_TRIPLET}/dri"
      cd "$SNAPCRAFT_PRIME/usr/share/"
      rm -rf bug drirc.d glvnd libdrm lintian man
      rm -rf applications apport bash-completion dbus-1 doc-base doc gtk-doc\
             help pkgconfig libthai metainfo themes thumbnailers xml
